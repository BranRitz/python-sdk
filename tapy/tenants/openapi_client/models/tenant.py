# coding: utf-8

"""
    Tenants API

    Manage Tapis Tenants.  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: cicsupport@tacc.utexas.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Tenant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tenant_id': 'str',
        'base_url': 'str',
        'is_owned_by_associate_site': 'bool',
        'token_service': 'str',
        'security_kernel': 'str',
        'authenticator': 'str',
        'owner': 'str',
        'service_ldap_connection_id': 'str',
        'user_ldap_connection_id': 'str',
        'description': 'str',
        'create_time': 'str',
        'last_update_time': 'str'
    }

    attribute_map = {
        'tenant_id': 'tenant_id',
        'base_url': 'base_url',
        'is_owned_by_associate_site': 'is_owned_by_associate_site',
        'token_service': 'token_service',
        'security_kernel': 'security_kernel',
        'authenticator': 'authenticator',
        'owner': 'owner',
        'service_ldap_connection_id': 'service_ldap_connection_id',
        'user_ldap_connection_id': 'user_ldap_connection_id',
        'description': 'description',
        'create_time': 'create_time',
        'last_update_time': 'last_update_time'
    }

    def __init__(self, tenant_id=None, base_url=None, is_owned_by_associate_site=None, token_service=None, security_kernel=None, authenticator=None, owner=None, service_ldap_connection_id=None, user_ldap_connection_id=None, description=None, create_time=None, last_update_time=None):  # noqa: E501
        """Tenant - a model defined in OpenAPI"""  # noqa: E501

        self._tenant_id = None
        self._base_url = None
        self._is_owned_by_associate_site = None
        self._token_service = None
        self._security_kernel = None
        self._authenticator = None
        self._owner = None
        self._service_ldap_connection_id = None
        self._user_ldap_connection_id = None
        self._description = None
        self._create_time = None
        self._last_update_time = None
        self.discriminator = None

        self.tenant_id = tenant_id
        self.base_url = base_url
        self.is_owned_by_associate_site = is_owned_by_associate_site
        self.token_service = token_service
        self.security_kernel = security_kernel
        self.authenticator = authenticator
        self.owner = owner
        if service_ldap_connection_id is not None:
            self.service_ldap_connection_id = service_ldap_connection_id
        if user_ldap_connection_id is not None:
            self.user_ldap_connection_id = user_ldap_connection_id
        if description is not None:
            self.description = description
        if create_time is not None:
            self.create_time = create_time
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Tenant.  # noqa: E501

        The unique identifier for the tenant.  # noqa: E501

        :return: The tenant_id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Tenant.

        The unique identifier for the tenant.  # noqa: E501

        :param tenant_id: The tenant_id of this Tenant.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501
        if tenant_id is not None and not re.search(r'(\w)*', tenant_id):  # noqa: E501
            raise ValueError(r"Invalid value for `tenant_id`, must be a follow pattern or equal to `/(\w)*/`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def base_url(self):
        """Gets the base_url of this Tenant.  # noqa: E501

        The base URL for the tenant.  # noqa: E501

        :return: The base_url of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Tenant.

        The base URL for the tenant.  # noqa: E501

        :param base_url: The base_url of this Tenant.  # noqa: E501
        :type: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")  # noqa: E501

        self._base_url = base_url

    @property
    def is_owned_by_associate_site(self):
        """Gets the is_owned_by_associate_site of this Tenant.  # noqa: E501

        Whether the tenant is hosted by an associate site.  # noqa: E501

        :return: The is_owned_by_associate_site of this Tenant.  # noqa: E501
        :rtype: bool
        """
        return self._is_owned_by_associate_site

    @is_owned_by_associate_site.setter
    def is_owned_by_associate_site(self, is_owned_by_associate_site):
        """Sets the is_owned_by_associate_site of this Tenant.

        Whether the tenant is hosted by an associate site.  # noqa: E501

        :param is_owned_by_associate_site: The is_owned_by_associate_site of this Tenant.  # noqa: E501
        :type: bool
        """
        if is_owned_by_associate_site is None:
            raise ValueError("Invalid value for `is_owned_by_associate_site`, must not be `None`")  # noqa: E501

        self._is_owned_by_associate_site = is_owned_by_associate_site

    @property
    def token_service(self):
        """Gets the token_service of this Tenant.  # noqa: E501

        The resolvable location of the token service for the tenant.  # noqa: E501

        :return: The token_service of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._token_service

    @token_service.setter
    def token_service(self, token_service):
        """Sets the token_service of this Tenant.

        The resolvable location of the token service for the tenant.  # noqa: E501

        :param token_service: The token_service of this Tenant.  # noqa: E501
        :type: str
        """
        if token_service is None:
            raise ValueError("Invalid value for `token_service`, must not be `None`")  # noqa: E501

        self._token_service = token_service

    @property
    def security_kernel(self):
        """Gets the security_kernel of this Tenant.  # noqa: E501

        The resolvable location of the security kernel for the tenant.  # noqa: E501

        :return: The security_kernel of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._security_kernel

    @security_kernel.setter
    def security_kernel(self, security_kernel):
        """Sets the security_kernel of this Tenant.

        The resolvable location of the security kernel for the tenant.  # noqa: E501

        :param security_kernel: The security_kernel of this Tenant.  # noqa: E501
        :type: str
        """
        if security_kernel is None:
            raise ValueError("Invalid value for `security_kernel`, must not be `None`")  # noqa: E501

        self._security_kernel = security_kernel

    @property
    def authenticator(self):
        """Gets the authenticator of this Tenant.  # noqa: E501

        The resolvable location of the authenticator for the tenant.  # noqa: E501

        :return: The authenticator of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._authenticator

    @authenticator.setter
    def authenticator(self, authenticator):
        """Sets the authenticator of this Tenant.

        The resolvable location of the authenticator for the tenant.  # noqa: E501

        :param authenticator: The authenticator of this Tenant.  # noqa: E501
        :type: str
        """
        if authenticator is None:
            raise ValueError("Invalid value for `authenticator`, must not be `None`")  # noqa: E501

        self._authenticator = authenticator

    @property
    def owner(self):
        """Gets the owner of this Tenant.  # noqa: E501

        The email address of the primary owner and contact for the tenant.  # noqa: E501

        :return: The owner of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Tenant.

        The email address of the primary owner and contact for the tenant.  # noqa: E501

        :param owner: The owner of this Tenant.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def service_ldap_connection_id(self):
        """Gets the service_ldap_connection_id of this Tenant.  # noqa: E501

        The unique identifier for the LDAP object for service accounts in the tenant.  # noqa: E501

        :return: The service_ldap_connection_id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._service_ldap_connection_id

    @service_ldap_connection_id.setter
    def service_ldap_connection_id(self, service_ldap_connection_id):
        """Sets the service_ldap_connection_id of this Tenant.

        The unique identifier for the LDAP object for service accounts in the tenant.  # noqa: E501

        :param service_ldap_connection_id: The service_ldap_connection_id of this Tenant.  # noqa: E501
        :type: str
        """

        self._service_ldap_connection_id = service_ldap_connection_id

    @property
    def user_ldap_connection_id(self):
        """Gets the user_ldap_connection_id of this Tenant.  # noqa: E501

        The unique identifier for the LDAP object for user accounts in the tenant.  # noqa: E501

        :return: The user_ldap_connection_id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._user_ldap_connection_id

    @user_ldap_connection_id.setter
    def user_ldap_connection_id(self, user_ldap_connection_id):
        """Sets the user_ldap_connection_id of this Tenant.

        The unique identifier for the LDAP object for user accounts in the tenant.  # noqa: E501

        :param user_ldap_connection_id: The user_ldap_connection_id of this Tenant.  # noqa: E501
        :type: str
        """

        self._user_ldap_connection_id = user_ldap_connection_id

    @property
    def description(self):
        """Gets the description of this Tenant.  # noqa: E501

        A description of the tenant.  # noqa: E501

        :return: The description of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tenant.

        A description of the tenant.  # noqa: E501

        :param description: The description of this Tenant.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def create_time(self):
        """Gets the create_time of this Tenant.  # noqa: E501

        The time the client was created.  # noqa: E501

        :return: The create_time of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Tenant.

        The time the client was created.  # noqa: E501

        :param create_time: The create_time of this Tenant.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this Tenant.  # noqa: E501

        The time the client was last updated.  # noqa: E501

        :return: The last_update_time of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this Tenant.

        The time the client was last updated.  # noqa: E501

        :param last_update_time: The last_update_time of this Tenant.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
