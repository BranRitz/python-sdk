# coding: utf-8

"""
    Tenants API

    Manage Tapis Tenants.  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: cicsupport@tacc.utexas.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Owner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'email': 'str',
        'institution': 'str',
        'create_time': 'str',
        'last_update_time': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'institution': 'institution',
        'create_time': 'create_time',
        'last_update_time': 'last_update_time'
    }

    def __init__(self, name=None, email=None, institution=None, create_time=None, last_update_time=None):  # noqa: E501
        """Owner - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._email = None
        self._institution = None
        self._create_time = None
        self._last_update_time = None
        self.discriminator = None

        self.name = name
        self.email = email
        self.institution = institution
        if create_time is not None:
            self.create_time = create_time
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def name(self):
        """Gets the name of this Owner.  # noqa: E501

        Full name of the owner.  # noqa: E501

        :return: The name of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Owner.

        Full name of the owner.  # noqa: E501

        :param name: The name of this Owner.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this Owner.  # noqa: E501

        Email address for the owner.  # noqa: E501

        :return: The email of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Owner.

        Email address for the owner.  # noqa: E501

        :param email: The email of this Owner.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def institution(self):
        """Gets the institution of this Owner.  # noqa: E501

        The owner's institution.  # noqa: E501

        :return: The institution of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this Owner.

        The owner's institution.  # noqa: E501

        :param institution: The institution of this Owner.  # noqa: E501
        :type: str
        """
        if institution is None:
            raise ValueError("Invalid value for `institution`, must not be `None`")  # noqa: E501

        self._institution = institution

    @property
    def create_time(self):
        """Gets the create_time of this Owner.  # noqa: E501

        The time the client was created.  # noqa: E501

        :return: The create_time of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Owner.

        The time the client was created.  # noqa: E501

        :param create_time: The create_time of this Owner.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this Owner.  # noqa: E501

        The time the client was last updated.  # noqa: E501

        :return: The last_update_time of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this Owner.

        The time the client was last updated.  # noqa: E501

        :param last_update_time: The last_update_time of this Owner.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Owner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
