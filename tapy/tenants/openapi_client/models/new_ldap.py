# coding: utf-8

"""
    Tenants API

    Manage Tapis Tenants.  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: cicsupport@tacc.utexas.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NewLDAP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ldap_id': 'str',
        'url': 'str',
        'port': 'int',
        'use_ssl': 'bool',
        'user_dn': 'str',
        'bind_dn': 'str',
        'bind_credential': 'str',
        'account_type': 'str'
    }

    attribute_map = {
        'ldap_id': 'ldap_id',
        'url': 'url',
        'port': 'port',
        'use_ssl': 'use_ssl',
        'user_dn': 'user_dn',
        'bind_dn': 'bind_dn',
        'bind_credential': 'bind_credential',
        'account_type': 'account_type'
    }

    def __init__(self, ldap_id=None, url=None, port=None, use_ssl=None, user_dn=None, bind_dn=None, bind_credential=None, account_type=None):  # noqa: E501
        """NewLDAP - a model defined in OpenAPI"""  # noqa: E501

        self._ldap_id = None
        self._url = None
        self._port = None
        self._use_ssl = None
        self._user_dn = None
        self._bind_dn = None
        self._bind_credential = None
        self._account_type = None
        self.discriminator = None

        self.ldap_id = ldap_id
        self.url = url
        self.port = port
        self.use_ssl = use_ssl
        self.user_dn = user_dn
        self.bind_dn = bind_dn
        self.bind_credential = bind_credential
        self.account_type = account_type

    @property
    def ldap_id(self):
        """Gets the ldap_id of this NewLDAP.  # noqa: E501

        Unique id for the LDAP object.  # noqa: E501

        :return: The ldap_id of this NewLDAP.  # noqa: E501
        :rtype: str
        """
        return self._ldap_id

    @ldap_id.setter
    def ldap_id(self, ldap_id):
        """Sets the ldap_id of this NewLDAP.

        Unique id for the LDAP object.  # noqa: E501

        :param ldap_id: The ldap_id of this NewLDAP.  # noqa: E501
        :type: str
        """
        if ldap_id is None:
            raise ValueError("Invalid value for `ldap_id`, must not be `None`")  # noqa: E501

        self._ldap_id = ldap_id

    @property
    def url(self):
        """Gets the url of this NewLDAP.  # noqa: E501

        url to the LDAP  # noqa: E501

        :return: The url of this NewLDAP.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NewLDAP.

        url to the LDAP  # noqa: E501

        :param url: The url of this NewLDAP.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def port(self):
        """Gets the port of this NewLDAP.  # noqa: E501

        port for the LDAP  # noqa: E501

        :return: The port of this NewLDAP.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NewLDAP.

        port for the LDAP  # noqa: E501

        :param port: The port of this NewLDAP.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def use_ssl(self):
        """Gets the use_ssl of this NewLDAP.  # noqa: E501

        Whether to use SSL with the LDAP  # noqa: E501

        :return: The use_ssl of this NewLDAP.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this NewLDAP.

        Whether to use SSL with the LDAP  # noqa: E501

        :param use_ssl: The use_ssl of this NewLDAP.  # noqa: E501
        :type: bool
        """
        if use_ssl is None:
            raise ValueError("Invalid value for `use_ssl`, must not be `None`")  # noqa: E501

        self._use_ssl = use_ssl

    @property
    def user_dn(self):
        """Gets the user_dn of this NewLDAP.  # noqa: E501

        base DN for users  # noqa: E501

        :return: The user_dn of this NewLDAP.  # noqa: E501
        :rtype: str
        """
        return self._user_dn

    @user_dn.setter
    def user_dn(self, user_dn):
        """Sets the user_dn of this NewLDAP.

        base DN for users  # noqa: E501

        :param user_dn: The user_dn of this NewLDAP.  # noqa: E501
        :type: str
        """
        if user_dn is None:
            raise ValueError("Invalid value for `user_dn`, must not be `None`")  # noqa: E501

        self._user_dn = user_dn

    @property
    def bind_dn(self):
        """Gets the bind_dn of this NewLDAP.  # noqa: E501

        DN used for binding to the LDAP.  # noqa: E501

        :return: The bind_dn of this NewLDAP.  # noqa: E501
        :rtype: str
        """
        return self._bind_dn

    @bind_dn.setter
    def bind_dn(self, bind_dn):
        """Sets the bind_dn of this NewLDAP.

        DN used for binding to the LDAP.  # noqa: E501

        :param bind_dn: The bind_dn of this NewLDAP.  # noqa: E501
        :type: str
        """
        if bind_dn is None:
            raise ValueError("Invalid value for `bind_dn`, must not be `None`")  # noqa: E501

        self._bind_dn = bind_dn

    @property
    def bind_credential(self):
        """Gets the bind_credential of this NewLDAP.  # noqa: E501

        Pointed to a Tapis credential for binding to the LDAP.  # noqa: E501

        :return: The bind_credential of this NewLDAP.  # noqa: E501
        :rtype: str
        """
        return self._bind_credential

    @bind_credential.setter
    def bind_credential(self, bind_credential):
        """Sets the bind_credential of this NewLDAP.

        Pointed to a Tapis credential for binding to the LDAP.  # noqa: E501

        :param bind_credential: The bind_credential of this NewLDAP.  # noqa: E501
        :type: str
        """
        if bind_credential is None:
            raise ValueError("Invalid value for `bind_credential`, must not be `None`")  # noqa: E501

        self._bind_credential = bind_credential

    @property
    def account_type(self):
        """Gets the account_type of this NewLDAP.  # noqa: E501

        Whether this LDAP is used for service accounts or user accounts.  # noqa: E501

        :return: The account_type of this NewLDAP.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this NewLDAP.

        Whether this LDAP is used for service accounts or user accounts.  # noqa: E501

        :param account_type: The account_type of this NewLDAP.  # noqa: E501
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501
        allowed_values = ["service", "user"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewLDAP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
