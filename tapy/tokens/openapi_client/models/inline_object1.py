# coding: utf-8

"""
    Tokens API

    Manage Tapis Tokens.  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: cicsupport@tacc.utexas.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_type': 'str',
        'token_tenant_id': 'str',
        'token_username': 'str',
        'delegation_token': 'bool',
        'delegation_sub_tenant_id': 'str',
        'delegation_sub_username': 'str',
        'access_token_ttl': 'int',
        'generate_refresh_token': 'bool',
        'refresh_token_ttl': 'int',
        'claims': 'object'
    }

    attribute_map = {
        'token_type': 'token_type',
        'token_tenant_id': 'token_tenant_id',
        'token_username': 'token_username',
        'delegation_token': 'delegation_token',
        'delegation_sub_tenant_id': 'delegation_sub_tenant_id',
        'delegation_sub_username': 'delegation_sub_username',
        'access_token_ttl': 'access_token_ttl',
        'generate_refresh_token': 'generate_refresh_token',
        'refresh_token_ttl': 'refresh_token_ttl',
        'claims': 'claims'
    }

    def __init__(self, token_type=None, token_tenant_id=None, token_username=None, delegation_token=None, delegation_sub_tenant_id=None, delegation_sub_username=None, access_token_ttl=None, generate_refresh_token=None, refresh_token_ttl=None, claims=None):  # noqa: E501
        """InlineObject1 - a model defined in OpenAPI"""  # noqa: E501

        self._token_type = None
        self._token_tenant_id = None
        self._token_username = None
        self._delegation_token = None
        self._delegation_sub_tenant_id = None
        self._delegation_sub_username = None
        self._access_token_ttl = None
        self._generate_refresh_token = None
        self._refresh_token_ttl = None
        self._claims = None
        self.discriminator = None

        self.token_type = token_type
        self.token_tenant_id = token_tenant_id
        self.token_username = token_username
        if delegation_token is not None:
            self.delegation_token = delegation_token
        if delegation_sub_tenant_id is not None:
            self.delegation_sub_tenant_id = delegation_sub_tenant_id
        if delegation_sub_username is not None:
            self.delegation_sub_username = delegation_sub_username
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if generate_refresh_token is not None:
            self.generate_refresh_token = generate_refresh_token
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl
        if claims is not None:
            self.claims = claims

    @property
    def token_type(self):
        """Gets the token_type of this InlineObject1.  # noqa: E501

        Type of token (user or service) to generated.  # noqa: E501

        :return: The token_type of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this InlineObject1.

        Type of token (user or service) to generated.  # noqa: E501

        :param token_type: The token_type of this InlineObject1.  # noqa: E501
        :type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "service"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"  # noqa: E501
                .format(token_type, allowed_values)
            )

        self._token_type = token_type

    @property
    def token_tenant_id(self):
        """Gets the token_tenant_id of this InlineObject1.  # noqa: E501

        The tenant associated with the token to be generated.  # noqa: E501

        :return: The token_tenant_id of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._token_tenant_id

    @token_tenant_id.setter
    def token_tenant_id(self, token_tenant_id):
        """Sets the token_tenant_id of this InlineObject1.

        The tenant associated with the token to be generated.  # noqa: E501

        :param token_tenant_id: The token_tenant_id of this InlineObject1.  # noqa: E501
        :type: str
        """
        if token_tenant_id is None:
            raise ValueError("Invalid value for `token_tenant_id`, must not be `None`")  # noqa: E501

        self._token_tenant_id = token_tenant_id

    @property
    def token_username(self):
        """Gets the token_username of this InlineObject1.  # noqa: E501

        The username associated with the token to be generated.  # noqa: E501

        :return: The token_username of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._token_username

    @token_username.setter
    def token_username(self, token_username):
        """Sets the token_username of this InlineObject1.

        The username associated with the token to be generated.  # noqa: E501

        :param token_username: The token_username of this InlineObject1.  # noqa: E501
        :type: str
        """
        if token_username is None:
            raise ValueError("Invalid value for `token_username`, must not be `None`")  # noqa: E501

        self._token_username = token_username

    @property
    def delegation_token(self):
        """Gets the delegation_token of this InlineObject1.  # noqa: E501

        Whether the generated token should be a delegation token.  # noqa: E501

        :return: The delegation_token of this InlineObject1.  # noqa: E501
        :rtype: bool
        """
        return self._delegation_token

    @delegation_token.setter
    def delegation_token(self, delegation_token):
        """Sets the delegation_token of this InlineObject1.

        Whether the generated token should be a delegation token.  # noqa: E501

        :param delegation_token: The delegation_token of this InlineObject1.  # noqa: E501
        :type: bool
        """

        self._delegation_token = delegation_token

    @property
    def delegation_sub_tenant_id(self):
        """Gets the delegation_sub_tenant_id of this InlineObject1.  # noqa: E501

        The tenant_id associated with the subject who used a delegation authority in creating the delegation token.  # noqa: E501

        :return: The delegation_sub_tenant_id of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._delegation_sub_tenant_id

    @delegation_sub_tenant_id.setter
    def delegation_sub_tenant_id(self, delegation_sub_tenant_id):
        """Sets the delegation_sub_tenant_id of this InlineObject1.

        The tenant_id associated with the subject who used a delegation authority in creating the delegation token.  # noqa: E501

        :param delegation_sub_tenant_id: The delegation_sub_tenant_id of this InlineObject1.  # noqa: E501
        :type: str
        """

        self._delegation_sub_tenant_id = delegation_sub_tenant_id

    @property
    def delegation_sub_username(self):
        """Gets the delegation_sub_username of this InlineObject1.  # noqa: E501

        The username associated with the subject who used a delegation authority in creating the delegation token.  # noqa: E501

        :return: The delegation_sub_username of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._delegation_sub_username

    @delegation_sub_username.setter
    def delegation_sub_username(self, delegation_sub_username):
        """Sets the delegation_sub_username of this InlineObject1.

        The username associated with the subject who used a delegation authority in creating the delegation token.  # noqa: E501

        :param delegation_sub_username: The delegation_sub_username of this InlineObject1.  # noqa: E501
        :type: str
        """

        self._delegation_sub_username = delegation_sub_username

    @property
    def access_token_ttl(self):
        """Gets the access_token_ttl of this InlineObject1.  # noqa: E501

        The TTL, in seconds, for the generated token.  # noqa: E501

        :return: The access_token_ttl of this InlineObject1.  # noqa: E501
        :rtype: int
        """
        return self._access_token_ttl

    @access_token_ttl.setter
    def access_token_ttl(self, access_token_ttl):
        """Sets the access_token_ttl of this InlineObject1.

        The TTL, in seconds, for the generated token.  # noqa: E501

        :param access_token_ttl: The access_token_ttl of this InlineObject1.  # noqa: E501
        :type: int
        """

        self._access_token_ttl = access_token_ttl

    @property
    def generate_refresh_token(self):
        """Gets the generate_refresh_token of this InlineObject1.  # noqa: E501

        Whether to also generate a refresh token.  # noqa: E501

        :return: The generate_refresh_token of this InlineObject1.  # noqa: E501
        :rtype: bool
        """
        return self._generate_refresh_token

    @generate_refresh_token.setter
    def generate_refresh_token(self, generate_refresh_token):
        """Sets the generate_refresh_token of this InlineObject1.

        Whether to also generate a refresh token.  # noqa: E501

        :param generate_refresh_token: The generate_refresh_token of this InlineObject1.  # noqa: E501
        :type: bool
        """

        self._generate_refresh_token = generate_refresh_token

    @property
    def refresh_token_ttl(self):
        """Gets the refresh_token_ttl of this InlineObject1.  # noqa: E501

        The TTL, in seconds, for the refresh token (if generated).  # noqa: E501

        :return: The refresh_token_ttl of this InlineObject1.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_ttl

    @refresh_token_ttl.setter
    def refresh_token_ttl(self, refresh_token_ttl):
        """Sets the refresh_token_ttl of this InlineObject1.

        The TTL, in seconds, for the refresh token (if generated).  # noqa: E501

        :param refresh_token_ttl: The refresh_token_ttl of this InlineObject1.  # noqa: E501
        :type: int
        """

        self._refresh_token_ttl = refresh_token_ttl

    @property
    def claims(self):
        """Gets the claims of this InlineObject1.  # noqa: E501

        JSON object of additional claims to add to the standard claims issued with the token. Note - standard claims cannot be modified through this parameter.  # noqa: E501

        :return: The claims of this InlineObject1.  # noqa: E501
        :rtype: object
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this InlineObject1.

        JSON object of additional claims to add to the standard claims issued with the token. Note - standard claims cannot be modified through this parameter.  # noqa: E501

        :param claims: The claims of this InlineObject1.  # noqa: E501
        :type: object
        """

        self._claims = claims

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
